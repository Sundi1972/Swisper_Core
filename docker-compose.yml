version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "5173:5173"
    depends_on:
      - gateway
    environment:
      - VITE_API_BASE_URL=http://gateway:8000
    env_file:
      - .env

  gateway:
    build:
      context: . # This refers to the repository root directory
      dockerfile: Dockerfile.gateway
    ports:
      - "8000:8000"
    volumes:
      - ./gateway:/app/gateway
      - ./orchestrator:/app/orchestrator
      - ./contract_engine:/app/contract_engine
      - ./tool_adapter:/app/tool_adapter
      - ./haystack_pipeline:/app/haystack_pipeline
      - ./prompt_preprocessor.py:/app/prompt_preprocessor.py
      - ./tests:/app/tests
      - ./docs:/app/docs
      - ./contract_templates:/app/contract_templates
      - ./schemas:/app/schemas
      - ./db_data:/app/db_data                     # âœ… Correct shelve storage directory
      - ./tmp:/app/tmp                             # For contract artifacts
    working_dir: /app
    environment:
      - OPENAI_API_KEY=${OpenAI_API_Key}           # From your .env file
      - SEARCHAPI_API_KEY=${SearchAPI_API_Key}     # From your .env file
      - USE_GPU=false
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    command: uvicorn gateway.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app
    # Load environment variables from .env file
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  redis_data:
